// Code generated by protoc-gen-go.
// source: cop.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	cop.proto

It has these top-level messages:
	RegisterReq
	RegisterResp
	UnregisterReq
	UnregisterResp
	EnrollReq
	EnrollResp
	ReenrollReq
	ReenrollResp
	GetAttributesReq
	GetAttributesResp
	AddAttributesReq
	AddAttributesResp
	DelAttributesReq
	DelAttributesResp
	Attribute
	Signature
	PublicKey
	Nonce
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CryptoType
type CryptoType int32

const (
	CryptoType_ECDSA CryptoType = 0
	CryptoType_RSA   CryptoType = 1
	CryptoType_DSA   CryptoType = 2
)

var CryptoType_name = map[int32]string{
	0: "ECDSA",
	1: "RSA",
	2: "DSA",
}
var CryptoType_value = map[string]int32{
	"ECDSA": 0,
	"RSA":   1,
	"DSA":   2,
}

func (x CryptoType) String() string {
	return proto.EnumName(CryptoType_name, int32(x))
}

// A register request
type RegisterReq struct {
	Id          string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Affiliation string       `protobuf:"bytes,2,opt,name=affiliation" json:"affiliation,omitempty"`
	Attributes  []*Attribute `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty"`
	Nonce       *Nonce       `protobuf:"bytes,4,opt,name=nonce" json:"nonce,omitempty"`
	CallerId    string       `protobuf:"bytes,5,opt,name=callerId" json:"callerId,omitempty"`
	Sig         *Signature   `protobuf:"bytes,6,opt,name=sig" json:"sig,omitempty"`
}

func (m *RegisterReq) Reset()         { *m = RegisterReq{} }
func (m *RegisterReq) String() string { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()    {}

func (m *RegisterReq) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *RegisterReq) GetNonce() *Nonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *RegisterReq) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

// A register response
type RegisterResp struct {
	EnrollSecret []byte `protobuf:"bytes,1,opt,name=enrollSecret,proto3" json:"enrollSecret,omitempty"`
}

func (m *RegisterResp) Reset()         { *m = RegisterResp{} }
func (m *RegisterResp) String() string { return proto.CompactTextString(m) }
func (*RegisterResp) ProtoMessage()    {}

// An unregister request
type UnregisterReq struct {
	Id       string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Nonce    *Nonce     `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	CallerId string     `protobuf:"bytes,3,opt,name=callerId" json:"callerId,omitempty"`
	Sig      *Signature `protobuf:"bytes,4,opt,name=sig" json:"sig,omitempty"`
}

func (m *UnregisterReq) Reset()         { *m = UnregisterReq{} }
func (m *UnregisterReq) String() string { return proto.CompactTextString(m) }
func (*UnregisterReq) ProtoMessage()    {}

func (m *UnregisterReq) GetNonce() *Nonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *UnregisterReq) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

// An unregister response
type UnregisterResp struct {
}

func (m *UnregisterResp) Reset()         { *m = UnregisterResp{} }
func (m *UnregisterResp) String() string { return proto.CompactTextString(m) }
func (*UnregisterResp) ProtoMessage()    {}

// An enroll request
type EnrollReq struct {
	Id           string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	EnrollSecret []byte     `protobuf:"bytes,2,opt,name=enrollSecret,proto3" json:"enrollSecret,omitempty"`
	Key          *PublicKey `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Sig          *Signature `protobuf:"bytes,4,opt,name=sig" json:"sig,omitempty"`
}

func (m *EnrollReq) Reset()         { *m = EnrollReq{} }
func (m *EnrollReq) String() string { return proto.CompactTextString(m) }
func (*EnrollReq) ProtoMessage()    {}

func (m *EnrollReq) GetKey() *PublicKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *EnrollReq) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

// An enroll response
type EnrollResp struct {
	Cert       []byte       `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *EnrollResp) Reset()         { *m = EnrollResp{} }
func (m *EnrollResp) String() string { return proto.CompactTextString(m) }
func (*EnrollResp) ProtoMessage()    {}

func (m *EnrollResp) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// A reenroll request is used to update the public key
type ReenrollReq struct {
	Id    string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Nonce *Nonce     `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	Key   *PublicKey `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Sig   *Signature `protobuf:"bytes,4,opt,name=sig" json:"sig,omitempty"`
}

func (m *ReenrollReq) Reset()         { *m = ReenrollReq{} }
func (m *ReenrollReq) String() string { return proto.CompactTextString(m) }
func (*ReenrollReq) ProtoMessage()    {}

func (m *ReenrollReq) GetNonce() *Nonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *ReenrollReq) GetKey() *PublicKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ReenrollReq) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

// A Reenroll response
type ReenrollResp struct {
	Cert       []byte       `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *ReenrollResp) Reset()         { *m = ReenrollResp{} }
func (m *ReenrollResp) String() string { return proto.CompactTextString(m) }
func (*ReenrollResp) ProtoMessage()    {}

func (m *ReenrollResp) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// A get attributes request
// The callerId must equal id or be the registrar which registered the identity
type GetAttributesReq struct {
	Id       string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Nonce    *Nonce     `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	CallerId string     `protobuf:"bytes,3,opt,name=callerId" json:"callerId,omitempty"`
	Sig      *Signature `protobuf:"bytes,4,opt,name=sig" json:"sig,omitempty"`
}

func (m *GetAttributesReq) Reset()         { *m = GetAttributesReq{} }
func (m *GetAttributesReq) String() string { return proto.CompactTextString(m) }
func (*GetAttributesReq) ProtoMessage()    {}

func (m *GetAttributesReq) GetNonce() *Nonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *GetAttributesReq) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

// A get attributes response
type GetAttributesResp struct {
	Id         string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *GetAttributesResp) Reset()         { *m = GetAttributesResp{} }
func (m *GetAttributesResp) String() string { return proto.CompactTextString(m) }
func (*GetAttributesResp) ProtoMessage()    {}

func (m *GetAttributesResp) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// An add attributes request
// The callerId must be the registrar which registered the identity
type AddAttributesReq struct {
	Id         string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	Nonce      *Nonce       `protobuf:"bytes,3,opt,name=nonce" json:"nonce,omitempty"`
	CallerId   string       `protobuf:"bytes,4,opt,name=callerId" json:"callerId,omitempty"`
	Sig        *Signature   `protobuf:"bytes,5,opt,name=sig" json:"sig,omitempty"`
}

func (m *AddAttributesReq) Reset()         { *m = AddAttributesReq{} }
func (m *AddAttributesReq) String() string { return proto.CompactTextString(m) }
func (*AddAttributesReq) ProtoMessage()    {}

func (m *AddAttributesReq) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *AddAttributesReq) GetNonce() *Nonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *AddAttributesReq) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

// An add attributes response
type AddAttributesResp struct {
	Id         string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *AddAttributesResp) Reset()         { *m = AddAttributesResp{} }
func (m *AddAttributesResp) String() string { return proto.CompactTextString(m) }
func (*AddAttributesResp) ProtoMessage()    {}

func (m *AddAttributesResp) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// A delete attributes request
// The callerId must equal id or be the registrar which registered the identity
type DelAttributesReq struct {
	Id         string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	Nonce      *Nonce       `protobuf:"bytes,3,opt,name=nonce" json:"nonce,omitempty"`
	CallerId   string       `protobuf:"bytes,4,opt,name=callerId" json:"callerId,omitempty"`
	Sig        *Signature   `protobuf:"bytes,5,opt,name=sig" json:"sig,omitempty"`
}

func (m *DelAttributesReq) Reset()         { *m = DelAttributesReq{} }
func (m *DelAttributesReq) String() string { return proto.CompactTextString(m) }
func (*DelAttributesReq) ProtoMessage()    {}

func (m *DelAttributesReq) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *DelAttributesReq) GetNonce() *Nonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *DelAttributesReq) GetSig() *Signature {
	if m != nil {
		return m.Sig
	}
	return nil
}

// A delete attributes response
type DelAttributesResp struct {
	Id         string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *DelAttributesResp) Reset()         { *m = DelAttributesResp{} }
func (m *DelAttributesResp) String() string { return proto.CompactTextString(m) }
func (*DelAttributesResp) ProtoMessage()    {}

func (m *DelAttributesResp) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// An add attributes request
type Attribute struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}

// Signature.
type Signature struct {
	Type CryptoType `protobuf:"varint,1,opt,name=type,enum=protos.CryptoType" json:"type,omitempty"`
	R    []byte     `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
	S    []byte     `protobuf:"bytes,3,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}

type PublicKey struct {
	Type CryptoType `protobuf:"varint,1,opt,name=type,enum=protos.CryptoType" json:"type,omitempty"`
	Key  []byte     `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}

// A nonce used to prevent replay attacks
type Nonce struct {
	Name  []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Nonce) Reset()         { *m = Nonce{} }
func (m *Nonce) String() string { return proto.CompactTextString(m) }
func (*Nonce) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("protos.CryptoType", CryptoType_name, CryptoType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for COP service

type COPClient interface {
	// Register an identity.
	// The caller must have the 'hf.registrar' attribute.
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	// Unregister an identity.
	// This deletes all state associated with the identity.
	// The caller must be the identity or the registrar of the identity.
	Unregister(ctx context.Context, in *UnregisterReq, opts ...grpc.CallOption) (*UnregisterResp, error)
	// Enroll an identity.
	// The caller must pass the enrollment secret.
	Enroll(ctx context.Context, in *EnrollReq, opts ...grpc.CallOption) (*EnrollResp, error)
	// Re-enroll an identity, which renews the certificate
	// The caller must be the identity.
	Reenroll(ctx context.Context, in *ReenrollReq, opts ...grpc.CallOption) (*ReenrollResp, error)
	// Get attributes associated with an identity.
	// The caller must be the identity.
	GetAttributes(ctx context.Context, in *GetAttributesReq, opts ...grpc.CallOption) (*GetAttributesResp, error)
	// Add attributes associated with an identity.
	// The caller must be the identity's registrar.
	AddAttributes(ctx context.Context, in *AddAttributesReq, opts ...grpc.CallOption) (*AddAttributesResp, error)
	// Delete attributes associated with an identity.
	// The caller must be the identity's registrar.
	DelAttributes(ctx context.Context, in *DelAttributesReq, opts ...grpc.CallOption) (*DelAttributesResp, error)
}

type cOPClient struct {
	cc *grpc.ClientConn
}

func NewCOPClient(cc *grpc.ClientConn) COPClient {
	return &cOPClient{cc}
}

func (c *cOPClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := grpc.Invoke(ctx, "/protos.COP/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOPClient) Unregister(ctx context.Context, in *UnregisterReq, opts ...grpc.CallOption) (*UnregisterResp, error) {
	out := new(UnregisterResp)
	err := grpc.Invoke(ctx, "/protos.COP/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOPClient) Enroll(ctx context.Context, in *EnrollReq, opts ...grpc.CallOption) (*EnrollResp, error) {
	out := new(EnrollResp)
	err := grpc.Invoke(ctx, "/protos.COP/Enroll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOPClient) Reenroll(ctx context.Context, in *ReenrollReq, opts ...grpc.CallOption) (*ReenrollResp, error) {
	out := new(ReenrollResp)
	err := grpc.Invoke(ctx, "/protos.COP/Reenroll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOPClient) GetAttributes(ctx context.Context, in *GetAttributesReq, opts ...grpc.CallOption) (*GetAttributesResp, error) {
	out := new(GetAttributesResp)
	err := grpc.Invoke(ctx, "/protos.COP/GetAttributes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOPClient) AddAttributes(ctx context.Context, in *AddAttributesReq, opts ...grpc.CallOption) (*AddAttributesResp, error) {
	out := new(AddAttributesResp)
	err := grpc.Invoke(ctx, "/protos.COP/AddAttributes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cOPClient) DelAttributes(ctx context.Context, in *DelAttributesReq, opts ...grpc.CallOption) (*DelAttributesResp, error) {
	out := new(DelAttributesResp)
	err := grpc.Invoke(ctx, "/protos.COP/DelAttributes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for COP service

type COPServer interface {
	// Register an identity.
	// The caller must have the 'hf.registrar' attribute.
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	// Unregister an identity.
	// This deletes all state associated with the identity.
	// The caller must be the identity or the registrar of the identity.
	Unregister(context.Context, *UnregisterReq) (*UnregisterResp, error)
	// Enroll an identity.
	// The caller must pass the enrollment secret.
	Enroll(context.Context, *EnrollReq) (*EnrollResp, error)
	// Re-enroll an identity, which renews the certificate
	// The caller must be the identity.
	Reenroll(context.Context, *ReenrollReq) (*ReenrollResp, error)
	// Get attributes associated with an identity.
	// The caller must be the identity.
	GetAttributes(context.Context, *GetAttributesReq) (*GetAttributesResp, error)
	// Add attributes associated with an identity.
	// The caller must be the identity's registrar.
	AddAttributes(context.Context, *AddAttributesReq) (*AddAttributesResp, error)
	// Delete attributes associated with an identity.
	// The caller must be the identity's registrar.
	DelAttributes(context.Context, *DelAttributesReq) (*DelAttributesResp, error)
}

func RegisterCOPServer(s *grpc.Server, srv COPServer) {
	s.RegisterService(&_COP_serviceDesc, srv)
}

func _COP_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(COPServer).Register(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _COP_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnregisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(COPServer).Unregister(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _COP_Enroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EnrollReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(COPServer).Enroll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _COP_Reenroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReenrollReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(COPServer).Reenroll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _COP_GetAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetAttributesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(COPServer).GetAttributes(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _COP_AddAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AddAttributesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(COPServer).AddAttributes(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _COP_DelAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DelAttributesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(COPServer).DelAttributes(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _COP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.COP",
	HandlerType: (*COPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _COP_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _COP_Unregister_Handler,
		},
		{
			MethodName: "Enroll",
			Handler:    _COP_Enroll_Handler,
		},
		{
			MethodName: "Reenroll",
			Handler:    _COP_Reenroll_Handler,
		},
		{
			MethodName: "GetAttributes",
			Handler:    _COP_GetAttributes_Handler,
		},
		{
			MethodName: "AddAttributes",
			Handler:    _COP_AddAttributes_Handler,
		},
		{
			MethodName: "DelAttributes",
			Handler:    _COP_DelAttributes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
