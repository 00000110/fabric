// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orderer/etcdraft/configuration.proto

package etcdraft // import "github.com/hyperledger/fabric/protos/orderer/etcdraft"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigMetadata is serialized and set as the value of ConsensusType.Metadata in
// a channel configuration when the ConsensusType.Type is set "etcdraft".
type ConfigMetadata struct {
	Consenters           []*Consenter `protobuf:"bytes,1,rep,name=consenters,proto3" json:"consenters,omitempty"`
	Options              *Options     `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ConfigMetadata) Reset()         { *m = ConfigMetadata{} }
func (m *ConfigMetadata) String() string { return proto.CompactTextString(m) }
func (*ConfigMetadata) ProtoMessage()    {}
func (*ConfigMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_configuration_8fd1749abf96604d, []int{0}
}
func (m *ConfigMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigMetadata.Unmarshal(m, b)
}
func (m *ConfigMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigMetadata.Marshal(b, m, deterministic)
}
func (dst *ConfigMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigMetadata.Merge(dst, src)
}
func (m *ConfigMetadata) XXX_Size() int {
	return xxx_messageInfo_ConfigMetadata.Size(m)
}
func (m *ConfigMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigMetadata proto.InternalMessageInfo

func (m *ConfigMetadata) GetConsenters() []*Consenter {
	if m != nil {
		return m.Consenters
	}
	return nil
}

func (m *ConfigMetadata) GetOptions() *Options {
	if m != nil {
		return m.Options
	}
	return nil
}

// Consenter represents a consenting node (i.e. replica).
type Consenter struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	ClientTlsCert        []byte   `protobuf:"bytes,3,opt,name=client_tls_cert,json=clientTlsCert,proto3" json:"client_tls_cert,omitempty"`
	ServerTlsCert        []byte   `protobuf:"bytes,4,opt,name=server_tls_cert,json=serverTlsCert,proto3" json:"server_tls_cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Consenter) Reset()         { *m = Consenter{} }
func (m *Consenter) String() string { return proto.CompactTextString(m) }
func (*Consenter) ProtoMessage()    {}
func (*Consenter) Descriptor() ([]byte, []int) {
	return fileDescriptor_configuration_8fd1749abf96604d, []int{1}
}
func (m *Consenter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Consenter.Unmarshal(m, b)
}
func (m *Consenter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Consenter.Marshal(b, m, deterministic)
}
func (dst *Consenter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consenter.Merge(dst, src)
}
func (m *Consenter) XXX_Size() int {
	return xxx_messageInfo_Consenter.Size(m)
}
func (m *Consenter) XXX_DiscardUnknown() {
	xxx_messageInfo_Consenter.DiscardUnknown(m)
}

var xxx_messageInfo_Consenter proto.InternalMessageInfo

func (m *Consenter) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Consenter) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Consenter) GetClientTlsCert() []byte {
	if m != nil {
		return m.ClientTlsCert
	}
	return nil
}

func (m *Consenter) GetServerTlsCert() []byte {
	if m != nil {
		return m.ServerTlsCert
	}
	return nil
}

// Options to be specified for all the etcd/raft nodes. These can be modified on a
// per-channel basis.
type Options struct {
	TickInterval    string `protobuf:"bytes,1,opt,name=tick_interval,json=tickInterval,proto3" json:"tick_interval,omitempty"`
	ElectionTick    uint32 `protobuf:"varint,2,opt,name=election_tick,json=electionTick,proto3" json:"election_tick,omitempty"`
	HeartbeatTick   uint32 `protobuf:"varint,3,opt,name=heartbeat_tick,json=heartbeatTick,proto3" json:"heartbeat_tick,omitempty"`
	MaxInflightMsgs uint32 `protobuf:"varint,4,opt,name=max_inflight_msgs,json=maxInflightMsgs,proto3" json:"max_inflight_msgs,omitempty"`
	MaxSizePerMsg   uint64 `protobuf:"varint,5,opt,name=max_size_per_msg,json=maxSizePerMsg,proto3" json:"max_size_per_msg,omitempty"`
	// Take snapshot when cumulative data exceeds certain size in bytes.
	SnapshotInterval     uint32   `protobuf:"varint,6,opt,name=snapshot_interval,json=snapshotInterval,proto3" json:"snapshot_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Options) Reset()         { *m = Options{} }
func (m *Options) String() string { return proto.CompactTextString(m) }
func (*Options) ProtoMessage()    {}
func (*Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_configuration_8fd1749abf96604d, []int{2}
}
func (m *Options) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Options.Unmarshal(m, b)
}
func (m *Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Options.Marshal(b, m, deterministic)
}
func (dst *Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Options.Merge(dst, src)
}
func (m *Options) XXX_Size() int {
	return xxx_messageInfo_Options.Size(m)
}
func (m *Options) XXX_DiscardUnknown() {
	xxx_messageInfo_Options.DiscardUnknown(m)
}

var xxx_messageInfo_Options proto.InternalMessageInfo

func (m *Options) GetTickInterval() string {
	if m != nil {
		return m.TickInterval
	}
	return ""
}

func (m *Options) GetElectionTick() uint32 {
	if m != nil {
		return m.ElectionTick
	}
	return 0
}

func (m *Options) GetHeartbeatTick() uint32 {
	if m != nil {
		return m.HeartbeatTick
	}
	return 0
}

func (m *Options) GetMaxInflightMsgs() uint32 {
	if m != nil {
		return m.MaxInflightMsgs
	}
	return 0
}

func (m *Options) GetMaxSizePerMsg() uint64 {
	if m != nil {
		return m.MaxSizePerMsg
	}
	return 0
}

func (m *Options) GetSnapshotInterval() uint32 {
	if m != nil {
		return m.SnapshotInterval
	}
	return 0
}

// BlockMetadata stores data used by the Raft OSNs when
// coordinating with each other, to be serialized into
// block meta dta field and used after failres and restarts.
type BlockMetadata struct {
	// Maintains a mapping between the cluster's OSNs
	// and their Raft IDs.
	ConsenterIds []uint64 `protobuf:"varint,1,rep,packed,name=consenter_ids,json=consenterIds,proto3" json:"consenter_ids,omitempty"`
	// Carries the Raft ID value that will be assigned
	// to the next OSN that will join this cluster.
	NextConsenterId uint64 `protobuf:"varint,2,opt,name=next_consenter_id,json=nextConsenterId,proto3" json:"next_consenter_id,omitempty"`
	// Raft cluster configurations count
	ConfChangeCounts uint64 `protobuf:"varint,3,opt,name=conf_change_counts,json=confChangeCounts,proto3" json:"conf_change_counts,omitempty"`
	// Index of etcd/raft entry for current block.
	RaftIndex            uint64   `protobuf:"varint,4,opt,name=raft_index,json=raftIndex,proto3" json:"raft_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockMetadata) Reset()         { *m = BlockMetadata{} }
func (m *BlockMetadata) String() string { return proto.CompactTextString(m) }
func (*BlockMetadata) ProtoMessage()    {}
func (*BlockMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_configuration_8fd1749abf96604d, []int{3}
}
func (m *BlockMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockMetadata.Unmarshal(m, b)
}
func (m *BlockMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockMetadata.Marshal(b, m, deterministic)
}
func (dst *BlockMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockMetadata.Merge(dst, src)
}
func (m *BlockMetadata) XXX_Size() int {
	return xxx_messageInfo_BlockMetadata.Size(m)
}
func (m *BlockMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_BlockMetadata proto.InternalMessageInfo

func (m *BlockMetadata) GetConsenterIds() []uint64 {
	if m != nil {
		return m.ConsenterIds
	}
	return nil
}

func (m *BlockMetadata) GetNextConsenterId() uint64 {
	if m != nil {
		return m.NextConsenterId
	}
	return 0
}

func (m *BlockMetadata) GetConfChangeCounts() uint64 {
	if m != nil {
		return m.ConfChangeCounts
	}
	return 0
}

func (m *BlockMetadata) GetRaftIndex() uint64 {
	if m != nil {
		return m.RaftIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*ConfigMetadata)(nil), "etcdraft.ConfigMetadata")
	proto.RegisterType((*Consenter)(nil), "etcdraft.Consenter")
	proto.RegisterType((*Options)(nil), "etcdraft.Options")
	proto.RegisterType((*BlockMetadata)(nil), "etcdraft.BlockMetadata")
}

func init() {
	proto.RegisterFile("orderer/etcdraft/configuration.proto", fileDescriptor_configuration_8fd1749abf96604d)
}

var fileDescriptor_configuration_8fd1749abf96604d = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0x4f, 0x6f, 0xdb, 0x20,
	0x18, 0x87, 0xe5, 0xd5, 0x6b, 0x17, 0x1a, 0x37, 0x09, 0xbb, 0xe4, 0x32, 0x29, 0x4a, 0xf7, 0x27,
	0x5a, 0x27, 0x5b, 0x6a, 0xb5, 0x2f, 0x50, 0x9f, 0x72, 0x88, 0x36, 0xb1, 0x9e, 0x76, 0x41, 0x04,
	0xbf, 0xb1, 0x51, 0x1c, 0xb0, 0x80, 0x54, 0x5e, 0xaf, 0xfb, 0x3c, 0xfb, 0x86, 0x3b, 0x4c, 0x80,
	0xed, 0x44, 0xbb, 0xa1, 0xe7, 0xf7, 0xbc, 0xf8, 0x05, 0x5e, 0xa3, 0xf7, 0x4a, 0x17, 0xa0, 0x41,
	0x67, 0x60, 0x79, 0xa1, 0xd9, 0xce, 0x66, 0x5c, 0xc9, 0x9d, 0x28, 0x8f, 0x9a, 0x59, 0xa1, 0x64,
	0xda, 0x68, 0x65, 0x15, 0x7e, 0xd3, 0xa7, 0x4b, 0x8d, 0x6e, 0x72, 0x2f, 0x6c, 0xc0, 0xb2, 0x82,
	0x59, 0x86, 0x1f, 0x10, 0xe2, 0x4a, 0x1a, 0x90, 0x16, 0xb4, 0x99, 0x47, 0x8b, 0x8b, 0xd5, 0xf5,
	0xfd, 0xdb, 0xb4, 0x2f, 0x48, 0xf3, 0x3e, 0x23, 0x67, 0x1a, 0xbe, 0x43, 0x57, 0xaa, 0x71, 0x1f,
	0x30, 0xf3, 0x57, 0x8b, 0x68, 0x75, 0x7d, 0x3f, 0x3b, 0x55, 0x7c, 0x0b, 0x01, 0xe9, 0x8d, 0xe5,
	0xef, 0x08, 0x8d, 0x86, 0x6d, 0x30, 0x46, 0x71, 0xa5, 0x8c, 0x9d, 0x47, 0x8b, 0x68, 0x35, 0x22,
	0x7e, 0xed, 0x58, 0xa3, 0xb4, 0xf5, 0x7b, 0x25, 0xc4, 0xaf, 0xf1, 0x47, 0x34, 0xe1, 0xb5, 0x00,
	0x69, 0xa9, 0xad, 0x0d, 0xe5, 0xa0, 0xed, 0xfc, 0x62, 0x11, 0xad, 0xc6, 0x24, 0x09, 0xf8, 0xa9,
	0x36, 0x39, 0x04, 0xcf, 0x80, 0x7e, 0x06, 0x7d, 0xf2, 0xe2, 0xe0, 0x05, 0xdc, 0x79, 0xcb, 0xbf,
	0x11, 0xba, 0xea, 0x5a, 0xc3, 0xb7, 0x28, 0xb1, 0x82, 0xef, 0xa9, 0x70, 0x1d, 0x3d, 0xb3, 0xba,
	0x6b, 0x66, 0xec, 0xe0, 0xba, 0x63, 0x4e, 0x82, 0x1a, 0xb8, 0xab, 0xa0, 0x2e, 0xe8, 0xba, 0x1b,
	0xf7, 0xf0, 0x49, 0xf0, 0x3d, 0xfe, 0x80, 0x6e, 0x2a, 0x60, 0xda, 0x6e, 0x81, 0xd9, 0x60, 0x5d,
	0x78, 0x2b, 0x19, 0xa8, 0xd7, 0x3e, 0xa3, 0xd9, 0x81, 0xb5, 0x54, 0xc8, 0x5d, 0x2d, 0xca, 0xca,
	0xd2, 0x83, 0x29, 0x8d, 0x6f, 0x33, 0x21, 0x93, 0x03, 0x6b, 0xd7, 0x1d, 0xdf, 0x98, 0xd2, 0xe0,
	0x4f, 0x68, 0xea, 0x5c, 0x23, 0x5e, 0x80, 0x36, 0xa0, 0x9d, 0x3b, 0x7f, 0xbd, 0x88, 0x56, 0x31,
	0x49, 0x0e, 0xac, 0xfd, 0x21, 0x5e, 0xe0, 0x3b, 0xe8, 0x8d, 0x29, 0xf1, 0x1d, 0x9a, 0x19, 0xc9,
	0x1a, 0x53, 0x29, 0x7b, 0x3a, 0xc9, 0xa5, 0xdf, 0x74, 0xda, 0x07, 0xfd, 0x69, 0x96, 0x7f, 0x22,
	0x94, 0x3c, 0xd6, 0x8a, 0xef, 0x87, 0x87, 0xbf, 0x45, 0xc9, 0xf0, 0xa2, 0x54, 0x14, 0xe1, 0xed,
	0x63, 0x32, 0x1e, 0xe0, 0xba, 0x30, 0xae, 0x71, 0x09, 0xad, 0xa5, 0xe7, 0xa6, 0xbf, 0x88, 0x98,
	0x4c, 0x5c, 0x90, 0x9f, 0x64, 0xfc, 0x05, 0x61, 0x37, 0x7c, 0x94, 0x57, 0x4c, 0x96, 0x40, 0xb9,
	0x3a, 0x4a, 0x6b, 0xfc, 0x7d, 0xc4, 0x64, 0xea, 0x92, 0xdc, 0x07, 0xb9, 0xe7, 0xf8, 0x1d, 0x42,
	0x6e, 0x5c, 0xa8, 0x90, 0x05, 0xb4, 0xfe, 0x2e, 0x62, 0x32, 0x72, 0x64, 0xed, 0xc0, 0x63, 0x89,
	0x52, 0xa5, 0xcb, 0xb4, 0xfa, 0xd5, 0x80, 0xae, 0xa1, 0x28, 0x41, 0xa7, 0x3b, 0xb6, 0xd5, 0x82,
	0x87, 0x91, 0x36, 0x69, 0x37, 0xf8, 0xc3, 0xdc, 0xfd, 0xfc, 0x5a, 0x0a, 0x5b, 0x1d, 0xb7, 0x29,
	0x57, 0x87, 0xec, 0xac, 0x2c, 0x0b, 0x65, 0x59, 0x28, 0xcb, 0xfe, 0xff, 0x5f, 0xb6, 0x97, 0x3e,
	0x78, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x30, 0x85, 0x37, 0x4a, 0x03, 0x00, 0x00,
}
